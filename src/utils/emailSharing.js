/**
 * Email sharing functionality for Fan Engagement Idea Generator
 * Provides utilities for sharing generated ideas via email
 */

/**
 * Generate an email body containing the filtered engagement ideas
 * @param {Array} ideas - Array of engagement idea objects to include in the email
 * @param {Object} filters - Object containing the filter criteria used
 * @returns {string} - HTML-formatted email body
 */
export const generateEmailBody = (ideas, filters) => {
  // Create email body HTML
  let emailBody = `
    <html>
    <head>
      <style>
        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
        .header { background-color: #2980b9; color: white; padding: 20px; text-align: center; }
        .content { padding: 20px; }
        .filters { background-color: #f8f9fa; padding: 15px; border-radius: 5px; margin-bottom: 20px; }
        .category { margin-top: 25px; border-bottom: 2px solid #2980b9; padding-bottom: 5px; color: #2980b9; }
        .idea { margin-bottom: 20px; padding-left: 15px; }
        .idea-title { font-weight: bold; font-size: 16px; }
        .idea-description { margin: 5px 0 10px 0; }
        .idea-details { font-size: 12px; color: #666; }
        .footer { margin-top: 30px; font-size: 12px; color: #666; text-align: center; border-top: 1px solid #eee; padding-top: 10px; }
      </style>
    </head>
    <body>
      <div class="header">
        <h1>Fan Engagement Ideas Report</h1>
      </div>
      <div class="content">
        <div class="filters">
          <h3>Your Search Criteria</h3>
  `;

  // Add filters information
  if (filters.industry) {
    emailBody += `<p><strong>Industry:</strong> ${filters.industry}</p>`;
  }
  
  if (filters.budget) {
    emailBody += `<p><strong>Budget Range:</strong> ${filters.budget}</p>`;
  }
  
  if (filters.audience && filters.audience.length > 0) {
    emailBody += `<p><strong>Target Audience:</strong> ${filters.audience.join(', ')}</p>`;
  }
  
  if (filters.goals && filters.goals.length > 0) {
    emailBody += `<p><strong>Engagement Goals:</strong> ${filters.goals.join(', ')}</p>`;
  }
  
  // Add generation date
  const today = new Date();
  emailBody += `<p><strong>Generated on:</strong> ${today.toLocaleDateString()}</p>`;
  
  // Add ideas count
  emailBody += `<p><strong>Found ${ideas.length} ideas matching your criteria</strong></p>`;
  emailBody += `</div>`; // Close filters div
  
  // Group ideas by category
  const categorizedIdeas = {};
  ideas.forEach(idea => {
    if (!categorizedIdeas[idea.category]) {
      categorizedIdeas[idea.category] = [];
    }
    categorizedIdeas[idea.category].push(idea);
  });
  
  // Add each category of ideas
  Object.keys(categorizedIdeas).forEach(category => {
    // Add category header
    const formattedCategory = category.charAt(0).toUpperCase() + category.slice(1);
    emailBody += `<h2 class="category">${formattedCategory} Ideas</h2>`;
    
    // Add ideas in this category
    categorizedIdeas[category].forEach(idea => {
      emailBody += `
        <div class="idea">
          <div class="idea-title">${idea.title}</div>
          <div class="idea-description">${idea.description}</div>
          <div class="idea-details">
            <p><strong>Budget:</strong> ${idea.budgetRange.join(' to ')}</p>
            <p><strong>Complexity:</strong> ${idea.implementationComplexity}</p>
      `;
      
      // Add example case if it exists
      if (idea.exampleCase) {
        emailBody += `<p><strong>Example:</strong> ${idea.exampleCase}</p>`;
      }
      
      emailBody += `
          </div>
        </div>
      `;
    });
  });
  
  // Add footer
  emailBody += `
        <div class="footer">
          <p>Generated by Fan Engagement Idea Generator | <a href="http://www.fanengagement.example.com">www.fanengagement.example.com</a></p>
          <p>This email was sent because you requested ideas for fan engagement strategies.</p>
        </div>
      </div>
    </body>
    </html>
  `;
  
  return emailBody;
};

/**
 * Generate an email subject line
 * @param {number} ideaCount - Number of ideas being shared
 * @param {Object} filters - Object containing the filter criteria used
 * @returns {string} - Formatted email subject
 */
export const generateEmailSubject = (ideaCount, filters) => {
  let subject = `${ideaCount} Fan Engagement Ideas`;
  
  if (filters.industry) {
    subject += ` for ${filters.industry}`;
  }
  
  return subject;
};

/**
 * Open the user's default email client with pre-populated content
 * @param {Array} ideas - Array of engagement idea objects to include in the email
 * @param {Object} filters - Object containing the filter criteria used
 * @param {string} recipientEmail - Email address of the recipient (optional)
 */
export const shareViaEmail = (ideas, filters, recipientEmail = '') => {
  const subject = generateEmailSubject(ideas.length, filters);
  const body = generateEmailBody(ideas, filters);
  
  // For security and technical reasons, we cannot directly set HTML content in mailto links
  // Instead, we'll use a simplified plain text version for the mailto link
  
  // Create a simplified plain text version
  let plainTextBody = `Fan Engagement Ideas Report\n\n`;
  plainTextBody += `Found ${ideas.length} ideas matching your criteria.\n\n`;
  plainTextBody += `View the full report with formatting by visiting our website.\n\n`;
  plainTextBody += `Generated by Fan Engagement Idea Generator | www.fanengagement.example.com`;
  
  // URL encode the subject and body
  const encodedSubject = encodeURIComponent(subject);
  const encodedBody = encodeURIComponent(plainTextBody);
  
  // Create the mailto link
  const mailtoLink = `mailto:${recipientEmail}?subject=${encodedSubject}&body=${encodedBody}`;
  
  // Open the user's email client
  window.open(mailtoLink);
  
  return {
    subject,
    htmlBody: body,
    plainTextBody
  };
};

/**
 * Alternative implementation that shows a modal dialog for copying HTML email
 * This is useful because mailto links cannot properly handle HTML content
 * @param {Array} ideas - Array of engagement idea objects to include in the email
 * @param {Object} filters - Object containing the filter criteria used
 * @returns {Object} - Contains email subject and body for use in a custom email dialog
 */
export const prepareEmailContent = (ideas, filters) => {
  return {
    subject: generateEmailSubject(ideas.length, filters),
    body: generateEmailBody(ideas, filters)
  };
};

export default {
  shareViaEmail,
  prepareEmailContent,
  generateEmailBody,
  generateEmailSubject
};