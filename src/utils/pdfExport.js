import { jsPDF } from 'jspdf';
import 'jspdf-autotable';

/**
 * Generate a PDF report containing the filtered engagement ideas
 * @param {Array} ideas - Array of engagement idea objects to include in the PDF
 * @param {Object} filters - Object containing the filter criteria used
 * @returns {jsPDF} - PDF document object that can be saved or opened
 */
export const generatePDF = (ideas, filters) => {
  // Create new PDF document
  const doc = new jsPDF();
  
  // Add title
  doc.setFontSize(20);
  doc.setTextColor(41, 128, 185); // Brand blue color
  doc.text('Fan Engagement Ideas Report', 105, 15, { align: 'center' });
  
  // Add filters summary
  doc.setFontSize(12);
  doc.setTextColor(0, 0, 0);
  doc.text('Filters Applied:', 14, 25);
  
  let yPos = 30;
  if (filters.industry) {
    doc.text(`Industry: ${filters.industry}`, 20, yPos);
    yPos += 5;
  }
  
  if (filters.budget) {
    doc.text(`Budget Range: ${filters.budget}`, 20, yPos);
    yPos += 5;
  }
  
  if (filters.audience && filters.audience.length > 0) {
    doc.text(`Target Audience: ${filters.audience.join(', ')}`, 20, yPos);
    yPos += 5;
  }
  
  if (filters.goals && filters.goals.length > 0) {
    doc.text(`Engagement Goals: ${filters.goals.join(', ')}`, 20, yPos);
    yPos += 10;
  } else {
    yPos += 5;
  }
  
  // Add generation date
  const today = new Date();
  doc.setFontSize(10);
  doc.setTextColor(100, 100, 100);
  doc.text(`Generated on ${today.toLocaleDateString()}`, 14, yPos);
  yPos += 10;
  
  // Add ideas count
  doc.setFontSize(12);
  doc.setTextColor(0, 0, 0);
  doc.text(`Found ${ideas.length} ideas matching your criteria:`, 14, yPos);
  yPos += 10;
  
  // Group ideas by category
  const categorizedIdeas = {};
  ideas.forEach(idea => {
    if (!categorizedIdeas[idea.category]) {
      categorizedIdeas[idea.category] = [];
    }
    categorizedIdeas[idea.category].push(idea);
  });
  
  // Add each category of ideas
  Object.keys(categorizedIdeas).forEach((category, index) => {
    // Add category header
    doc.setFontSize(14);
    doc.setTextColor(41, 128, 185);
    
    // Start a new page if we're not on the first category and close to the bottom
    if (index > 0 && yPos > 240) {
      doc.addPage();
      yPos = 20;
    }
    
    // Capitalize first letter of category
    const formattedCategory = category.charAt(0).toUpperCase() + category.slice(1);
    doc.text(`${formattedCategory} Ideas:`, 14, yPos);
    yPos += 7;
    
    // Add ideas in this category
    categorizedIdeas[category].forEach(idea => {
      // Check if we need a new page
      if (yPos > 270) {
        doc.addPage();
        yPos = 20;
      }
      
      // Add idea title
      doc.setFontSize(12);
      doc.setTextColor(0, 0, 0);
      doc.setFont(undefined, 'bold');
      doc.text(idea.title, 18, yPos);
      yPos += 5;
      
      // Add idea description
      doc.setFont(undefined, 'normal');
      doc.setFontSize(10);
      
      // Split description into multiple lines if needed
      const descLines = doc.splitTextToSize(idea.description, 170);
      doc.text(descLines, 18, yPos);
      yPos += (descLines.length * 5);
      
      // Add implementation details
      doc.setFontSize(9);
      doc.setTextColor(100, 100, 100);
      
      // Budget
      const budgetText = `Budget: ${idea.budgetRange.join(' to ')}`;
      doc.text(budgetText, 20, yPos);
      yPos += 4;
      
      // Complexity
      const complexityText = `Complexity: ${idea.implementationComplexity}`;
      doc.text(complexityText, 20, yPos);
      yPos += 4;
      
      // Example case (if it exists and fits)
      if (idea.exampleCase) {
        const exampleLines = doc.splitTextToSize(`Example: ${idea.exampleCase}`, 165);
        doc.text(exampleLines, 20, yPos);
        yPos += (exampleLines.length * 4) + 4;
      } else {
        yPos += 4;
      }
      
      // Add some spacing between ideas
      yPos += 3;
    });
    
    // Add some spacing between categories
    yPos += 5;
  });
  
  // Add footer
  const pageCount = doc.getNumberOfPages();
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    doc.setFontSize(8);
    doc.setTextColor(150, 150, 150);
    doc.text('Generated by Fan Engagement Idea Generator | www.fanengagement.example.com', 105, 290, { align: 'center' });
    doc.text(`Page ${i} of ${pageCount}`, 195, 290, { align: 'right' });
  }
  
  return doc;
};

/**
 * Save PDF to user's device
 * @param {jsPDF} doc - PDF document object
 * @param {string} filename - Name for the saved file
 */
export const savePDF = (doc, filename = 'fan-engagement-ideas.pdf') => {
  doc.save(filename);
};

/**
 * Open PDF in a new tab
 * @param {jsPDF} doc - PDF document object
 */
export const openPDF = (doc) => {
  const pdfDataUri = doc.output('datauristring');
  window.open(pdfDataUri, '_blank');
};

export default {
  generatePDF,
  savePDF,
  openPDF
};